1. Customer Placing the Largest Number Orders --> From codingninjas.com

Hint : Use the sub-query as a table, then pick the columns you need as output
select customer_number 
from 
    (select customer_number, count(order_number)Tot_orders
     from orders
     group by customer_number
     order by Tot_orders desc
     limit 1)d
==================================================================================================================================
2. To get he second highest salary --> From codingninjas.com

Hint: First remove the max salary from the dataset using filter condition, then get the max salary from the remaining dataset
select max(salary) 
from l1
where salary not in (
		    select max(salary) 	
                    from l1
                    )

===============================================================================================================================
3. To check if a customer named 'Shashank' has placed any orders or not; just a lookup

Hint - You dont have to use join when all you need is a lookup operation. 
	Hence use 'EXISTS' which works like a boolean that is if your subquery returns true, 
	only then the main query will return the records

select *
from customers c
where exists (
	      select order_id from orders o
              where o.customer_id = c.customer_id
              and c.customer_name = 'Shashank'
              );

Explanation:
For each records in the customer table, we do a lookup in the orders table based on the where conditions to see if any records exists.
'WHERE' in the sub query also acts like a 'ON' operation in join

================================================================================================================================
4. To capture only the unique combination of records

# Dataset creation

create table src_dest_distance
(
    source          varchar(20),
    destination     varchar(20),
    distance        int
);
insert into src_dest_distance values ('Bangalore', 'Hyderbad', 400);
insert into src_dest_distance values ('Hyderbad', 'Bangalore', 400);
insert into src_dest_distance values ('Mumbai', 'Delhi', 400);
insert into src_dest_distance values ('Delhi', 'Mumbai', 400);
insert into src_dest_distance values ('Chennai', 'Pune', 400);
insert into src_dest_distance values ('Pune', 'Chennai', 400);

Solution:

with c1 as (
		select *,
			row_number() over () ID   -- added a row number for each row and given an alias as ID
		from src_dest_distance sdd
)
select c1.*
from c1
join c1 c2  -- doing a self join
on c1.source = c2.destination -- 1st condition for joining
and c1.ID < c2.ID  -- another condition added using AND or WHERE operator to compare the IDs of the two tables and joining executes only
			-- when the ID of the c1 table is less than the ID of the c2 table. This will make sure that 
			-- every record of c1 table will match only with one record of c2 table- where the ID is less)
			-- for example ID 1 of c1 table will try to match only with IDs(2,3,4,5,6) of c2 table and not ID 1
			-- and of those, based on first condition, only record 2 of c2 will match

learnings:
2 condition join (with one non equi join)
row_number() over()

=========================================================================================================================
5. To write procedure for multiples of 5

delimiter //
drop procedure if exists multiple5;
create procedure multiple5(n int)
	begin
		declare a int;
		set a = 5;
		drop temporary table if exists T_multiple5;
		create temporary table T_multiple5(tm int);
		while (a<=n) do
			insert into T_multiple5
			select a;
			set a = a + 5;
		end while;

select * from T_multiple5;
end//
delimiter ;

call multiple5(300);

=======================================================================================================================================

6. COnverting row to columns

# Table creation and data insertion:

drop table if exists sales_data;

create table sales_data
    (
        sales_date      date,
        customer_id     varchar(30),
        amount          varchar(30)
    );
    
insert into sales_data values (str_to_date('01-Jan-2021','%d-%b-%Y'),'Cust-1', '50$');
insert into sales_data values (str_to_date('02-Jan-2021','%d-%b-%Y'), 'Cust-1', '50$');
insert into sales_data values (str_to_date('03-Jan-2021','%d-%b-%Y'), 'Cust-1', '50$');
insert into sales_data values (str_to_date('01-Jan-2021','%d-%b-%Y'),'Cust-2', '100$');
insert into sales_data values (str_to_date('02-Jan-2021','%d-%b-%Y'), 'Cust-2', '100$');
insert into sales_data values (str_to_date('03-Jan-2021', '%d-%b-%Y'),'Cust-2', '100$');
insert into sales_data values (str_to_date('01-Feb-2021', '%d-%b-%Y'),'Cust-2', '-100$');
insert into sales_data values (str_to_date('02-Feb-2021','%d-%b-%Y'), 'Cust-2', '-100$');
insert into sales_data values (str_to_date('03-Feb-2021', '%d-%b-%Y'),'Cust-2', '-100$');
insert into sales_data values (str_to_date('01-Mar-2021', '%d-%b-%Y'),'Cust-3', '1$');
insert into sales_data values (str_to_date('01-Apr-2021','%d-%b-%Y'), 'Cust-3', '1$');
insert into sales_data values (str_to_date('01-May-2021', '%d-%b-%Y'),'Cust-3', '1$');
insert into sales_data values (str_to_date('01-Jun-2021','%d-%b-%Y'), 'Cust-3', '1$');
insert into sales_data values (str_to_date('01-Jul-2021', '%d-%b-%Y'),'Cust-3', '-1$');
insert into sales_data values (str_to_date('01-Aug-2021','%d-%b-%Y'), 'Cust-3', '-1$');
insert into sales_data values (str_to_date('01-Sep-2021','%d-%b-%Y'),'Cust-3', '-1$');
insert into sales_data values (str_to_date('01-Oct-2021','%d-%b-%Y'),'Cust-3', '-1$');
insert into sales_data values (str_to_date('01-Nov-2021','%d-%b-%Y'), 'Cust-3', '-1$');
insert into sales_data values (str_to_date('01-Dec-2021', '%d-%b-%Y'),'Cust-3', '-1$');


---------------------------------------------------------------------------------------------------------------------------------

-- base query written to get the data in the required format
with base_query as (
					select customer_id as Customer,
						   date_format(sales_date,'%b-%y') sales_date,  -- %b for month in MMM format & %y for year in YY format
						   replace(amount,'$','') amount  -- to remove the $ suffix for calculatin purpose
					from sales_data
					),
-- case statement used to create columns for each month and in that process the rows got converted to columns
final_data as (
				select Customer,
						sum(case when sales_date = 'Jan-21' then amount else 0 end) as Jan_21,
						sum(case when sales_date = 'Feb-21' then amount else 0 end) as Feb_21,
						sum(case when sales_date = 'Mar-21' then amount else 0 end) as Mar_21,
						sum(case when sales_date = 'Apr-21' then amount else 0 end) as Apr_21,
						sum(case when sales_date = 'May-21' then amount else 0 end) as May_21,
						sum(case when sales_date = 'Jun-21' then amount else 0 end) as Jun_21,
						sum(case when sales_date = 'Jul-21' then amount else 0 end) as Jul_21,
						sum(case when sales_date = 'Aug-21' then amount else 0 end) as Aug_21,
						sum(case when sales_date = 'Sep-21' then amount else 0 end) as Sep_21,
						sum(case when sales_date = 'Oct-21' then amount else 0 end) as Oct_21,
						sum(case when sales_date = 'Nov-21' then amount else 0 end) as Nov_21,
						sum(case when sales_date = 'Dec-21' then amount else 0 end) as Dec_21,
						sum(amount) as Total -- to add the last column
				from base_query
				group by Customer
				UNION -- to add the last row 'Total', used 'UNION' operator which must have the same number of columns as the above query
				select 'Total' as Customer, -- hard coded the 'Total' name here
						sum(case when sales_date = 'Jan-21' then amount else 0 end) as Jan_21,
						sum(case when sales_date = 'Feb-21' then amount else 0 end) as Feb_21,
						sum(case when sales_date = 'Mar-21' then amount else 0 end) as Mar_21,
						sum(case when sales_date = 'Apr-21' then amount else 0 end) as Apr_21,
						sum(case when sales_date = 'May-21' then amount else 0 end) as May_21,
						sum(case when sales_date = 'Jun-21' then amount else 0 end) as Jun_21,
						sum(case when sales_date = 'Jul-21' then amount else 0 end) as Jul_21,
						sum(case when sales_date = 'Aug-21' then amount else 0 end) as Aug_21,
						sum(case when sales_date = 'Sep-21' then amount else 0 end) as Sep_21,
						sum(case when sales_date = 'Oct-21' then amount else 0 end) as Oct_21,
						sum(case when sales_date = 'Nov-21' then amount else 0 end) as Nov_21,
						sum(case when sales_date = 'Dec-21' then amount else 0 end) as Dec_21,
						'' as Total -- to have a blank cell in the last column
				from base_query
                )
	-- Final transformaion of data done in the below main query wherein the negative sign is replaced with braces and all the values are suffixed with $ sign
	select customer,
			case when Jan_21< 0 then concat('(',Jan_21*-1,')$') else concat(Jan_21, '$') end as 'Jan-21',
            case when Feb_21< 0 then concat('(',Feb_21*-1,')$') else concat(Feb_21, '$') end as 'Feb-21',
            case when Mar_21< 0 then concat('(',Mar_21*-1,')$') else concat(Mar_21, '$') end as 'Mar-21',
            case when Apr_21< 0 then concat('(',Apr_21*-1,')$') else concat(Apr_21, '$') end as 'Apr-21',
            case when May_21< 0 then concat('(',May_21*-1,')$') else concat(May_21, '$') end as 'May-21',
            case when Jun_21< 0 then concat('(',Jun_21*-1,')$') else concat(Jun_21, '$') end as 'Jun-21',
            case when Jul_21< 0 then concat('(',Jul_21*-1,')$') else concat(Jul_21, '$') end as 'Jul-21',
            case when Aug_21< 0 then concat('(',Aug_21*-1,')$') else concat(Aug_21, '$') end as 'Aug-21',
            case when Sep_21< 0 then concat('(',Sep_21*-1,')$') else concat(Sep_21, '$') end as 'Sep-21',
            case when Oct_21< 0 then concat('(',Oct_21*-1,')$') else concat(Oct_21, '$') end as 'Oct-21',
            case when Nov_21< 0 then concat('(',Nov_21*-1,')$') else concat(Nov_21, '$') end as 'Nov-21',
            case when total = '' then '' else -- to leave it blank if blank for the very last cell
					(case when Total < 0 then concat('(',Total*-1,')$') else concat(Total, '$') end) end as 'Total' -- for the last column 'Total'
	from final_data;
                
================================================================================================================




