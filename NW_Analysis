use northwind;

# 1. Calculate average Unit Price for each CustomerId.

select * from order_details; -- ID,orderID,ProductID,UnitPrice,Quantity,Discount
select * from orders; -- OrderID, CustomerID, EmployeeID, Freight, Shipvia etc.,

-- with group by clause for all to get the summary
select o.CustomerID, o.orderID,od.ProductID,od.UnitPrice,od.quantity,
		-- avg(od.UnitPrice)over(partition by od.UnitPrice order by od.UnitPrice desc)Avg_UnitPrice -- this ll give the average price same as unitprice itself
        avg(od.UnitPrice)over(partition by o.CustomerID)Avg_UnitPrice -- here avg unit price is sum of unit prices divided by count of productIDs
from orders o
join order_details od
on o.orderID = od.orderID
group by o.CustomerID, o.orderID,od.ProductID,od.UnitPrice,od.quantity
order by o.CustomerID, od.UnitPrice;

-- Using windows function without group by on CustomerID
select o.CustomerID, 
		avg(od.UnitPrice)over(partition by o.CustomerID)Avg_UnitPrice
from orders o
join order_details od
on o.orderID = od.orderID
-- group by o.CustomerID  -- group by instead of giving avg unit price it seems to be picking up some random unit price for each customer
order by o.CustomerID;

-- Final soln:
select distinct o.CustomerID,
		round(avg(od.UnitPrice)over(partition by o.CustomerID ),2)Avg_UnitPrice
from orders o
join order_details od
on o.orderID = od.orderID
-- group by o.CustomerID  -- removed group by and included distinct keyword in the select statement to get the correct average price
order by o.CustomerID;

############################################################################################################################################

# 2. Calculate average Unit Price for each group of CustomerId AND EmployeeId.
-- doing the below way is wrong
select o.CustomerID, o.EmployeeID, od.ProductID,
		od.UnitPrice, od.quantity, 
		avg(od.UnitPrice)over(partition by o.CustomerID )Avg_UnitPrice_Cust,
        avg(od.UnitPrice)over(partition by o.EmployeeID )Avg_UnitPrice_Emp
from orders o
join order_details od
on o.orderID = od.orderID
order by o.CustomerID;

-- Final Soln
select o.CustomerID, o.EmployeeID, od.UnitPrice,
        avg(od.UnitPrice)over(partition by o.CustomerID, o.EmployeeID)Avg_UnitPrice_Cust_Emp_Grp
from orders o
join order_details od
on o.orderID = od.orderID
order by o.CustomerID;

#############################################################################################################################################

Explain RDS and AWS key management services.
 /* 
 Amazon RDS:
 Amazon Relational Database Service (RDS)is a managed Relational Database Service that provides the following benefits:
 1. Application compatibility with 6 DB engines - Amazon Aurora, MySQL, MariaDB, PostgreSQL, Oracle, and Microsoft SQL Server. 
 2. No Infrastructure Management.
 3. Instant Provisioning meaning the user will have instant access to data to work on.
 4. Scaling up/down flexibility to handle higher or lower load and scalable storage space:
	- Compute scaling up to a maximum of 32 vCPUs and 244 GiB of RAM
    - Storage scaling up to a maximum of 64 TB or a maximum you define with zero downtime
    - Using Read Replicas, you can scale out beyond the capacity of a single database deployment for read-heavy database workloads.
 5. Being cost effective meaning there are no upfront investments required and you pay only for the resources you use.
 Besides, it also provides patching, backup, recovery, failure detection, and repair.
 
 AWS Key Management Services(KMS):
 AWS KMS allows you to create and manage cryptographic keys that protects data across your AWS workloads. Accesses governed by the 
 Key policies which lets you precisely control when, how and who can read your data and using asymmetric key pairs
 you can create and verify digital signatures to ensure the integrity of your data. 
 Since AWS KMS is integrated with AWS CloudTrail you are able to record all the API requests including Key management actions, 
 Key lifecycle events and usage. This helps you manage risk & meet compliance requirements.AWS KMS is integrated with
 over a 100 AWS services.
 Since AWS KMS is fully managed, AWS KMS automatically scales to meet your needs and is designed to ensure your critical workloads
 will always have access to your keys.

 */
